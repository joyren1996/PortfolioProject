-- Import two csv files into pgAdmin
CREATE TABLE CovidDeaths (
iso_code VARCHAR (50),
continent VARCHAR (50),
case_location VARCHAR (50),
record_date DATE,
population INT8,
total_cases	BIGINT,
new_cases	BIGINT,
new_cases_smoothed DECIMAL(10,3),
total_deaths INT,
new_deaths	INT,
new_deaths_smoothed	DECIMAL(8,3),
total_cases_per_million	DECIMAL(9,3),
new_cases_per_million DECIMAL(9,3),
new_cases_smoothed_per_million DECIMAL(8,3),
total_deaths_per_million DECIMAL(8,3),
new_deaths_per_million DECIMAL(8,3),
new_deaths_smoothed_per_million	DECIMAL(6,3),
reproduction_rate DECIMAL(3,2),
icu_patients DECIMAL(8,3),
icu_patients_per_million DECIMAL(8,3),
hosp_patients INT,
hosp_patients_per_million DECIMAL(8,3),
weekly_icu_admissions DECIMAL(8,3),
weekly_icu_admissions_per_million DECIMAL(8,3),
weekly_hosp_admissions DECIMAL(9,3),
weekly_hosp_admissions_per_million DECIMAL(8,3)
)


CREATE TABLE CovidVaccinations 
(
iso_code VARCHAR (50),
continent VARCHAR (50),
case_location VARCHAR (50),
record_date DATE,
new_tests	BIGINT,
total_tests	BIGINT,
total_tests_per_thousand DECIMAL(9,3),
new_tests_per_thousand DECIMAL(7,3),
new_tests_smoothed INT,
new_tests_smoothed_per_thousand DECIMAL(6,3),
positive_rate DECIMAL(5,3),
tests_per_case DECIMAL(7,1),
tests_units	VARCHAR (50),
total_vaccinations BIGINT,
people_vaccinated BIGINT,
people_fully_vaccinated BIGINT,
total_boosters INT,
new_vaccinations BIGINT,
new_vaccinations_smoothed INT,
total_vaccinations_per_hundred DECIMAL(7,2),
people_vaccinated_per_hundred DECIMAL(7,2),
people_fully_vaccinated_per_hundred DECIMAL(7,2),
total_boosters_per_hundred DECIMAL(6,2),
new_vaccinations_smoothed_per_million INT,
new_people_vaccinated_smoothed INT,
new_people_vaccinated_smoothed_per_hundred DECIMAL(7,3),
stringency_index DECIMAL(7,2),
population_density DECIMAL(8,3),
median_age DECIMAL(3,1),
aged_65_older DECIMAL(5,3),
aged_70_older DECIMAL(5,3),
gdp_per_capita DECIMAL(9,3),
extreme_poverty	DECIMAL(3,1),
cardiovasc_death_rate DECIMAL(6,3),
diabetes_prevalence DECIMAL(4,2),
female_smokers DECIMAL(3,1),
male_smokers DECIMAL(3,1),
handwashing_facilities DECIMAL(6,3),
hospital_beds_per_thousand DECIMAL(3,1),
life_expectancy DECIMAL(4,2),
human_development_index DECIMAL(4,3),
excess_mortality_cumulative_absolute DECIMAL(8,1),
excess_mortality_cumulative	DECIMAL(5,2),
excess_mortality DECIMAL(5,2),
excess_mortality_cumulative_per_million DECIMAL(10,6)
)


-- Checking if two tables were created and uploaded successfully
SELECT * FROM coviddeaths
WHERE continent IS NOT NULL
ORDER BY 3,4


SELECT case_location,continent, record_date, total_cases, new_cases, total_deaths, population 
FROM coviddeaths
WHERE continent IS NOT NULL
ORDER BY 1,2

-- Looking at Total Cases vs Total Deaths

SELECT case_location, record_date, total_cases, total_deaths, (total_deaths::float/total_cases::float)*100 as death_rate 
FROM coviddeaths
WHERE case_location LIKE '%States%'
ORDER BY 1,2

-- Looking at Total Cases vs Population
SELECT case_location, record_date, total_cases, population, (total_cases::float/population::float)*100 as infection_rate 
FROM coviddeaths
WHERE case_location LIKE '%States%'
ORDER BY 1,2

--Looking at countries with the highest infection rate compared to population
SELECT case_location, population, max(total_cases) as peak, MAX(total_cases::float/population::float)*100 as infection_rate 
FROM coviddeaths
WHERE continent IS NOT NULL
GROUP BY case_location, population
ORDER BY infection_rate DESC

-- Showing countries with the highest death count per population
SELECT case_location, MAX(total_deaths) as death_count
FROM coviddeaths
WHERE continent IS NOT NULL
GROUP BY case_location
ORDER BY death_count DESC


-- Break things down by continent
-- Showing continents with the highest death count per population

SELECT case_location, MAX(total_deaths) as death_count
FROM coviddeaths
WHERE continent IS NULL AND case_location NOT LIKE '%income%'
GROUP BY case_location
ORDER BY death_count DESC

-- Global numbers
-- total deaths across the world by date
SELECT record_date, SUM(new_cases) AS total_cases, sum(new_deaths) AS total_deaths,(SUM(new_deaths)::float/SUM(new_cases)::float)*100 as daily_death_rate 
FROM coviddeaths
WHERE continent IS NOT NULL
GROUP BY record_date
ORDER BY 1,2

-- Vaccination Table

-- Looking at Total population vs Vaccinations 
SELECT dea.continent, dea.case_location, dea.record_date, dea.population, vac.new_vaccinations,
SUM(vac.new_vaccinations) OVER (PARTITION BY vac.case_location ORDER BY vac.case_location, vac.record_date) AS rolling_vaccinated
FROM coviddeaths dea 
JOIN covidvaccinations vac
ON dea.case_location = vac.case_location
AND dea.record_date = vac.record_date
WHERE dea.continent IS NOT NULL
ORDER BY 2,3

-- CTE

With PopvsVac (Continent, Location, Date, Population, New_Vaccinations, Rolling_vaccinated)
AS
(
SELECT dea.continent, dea.case_location, dea.record_date, dea.population, vac.new_vaccinations,
SUM(vac.new_vaccinations) OVER (PARTITION BY vac.case_location ORDER BY vac.case_location, vac.record_date) AS rolling_vaccinated
FROM coviddeaths dea 
JOIN covidvaccinations vac
ON dea.case_location = vac.case_location
AND dea.record_date = vac.record_date
WHERE dea.continent IS NOT NULL
)
SELECT * , (rolling_vaccinated::float/population::float)*100 AS Vac_rate
FROM PopvsVac

-- Temp Table
DROP TABLE IF EXISTS VaccinationRate
CREATE TABLE VaccinationRate
(
continent VARCHAR(50),
Case_Location VARCHAR(50),
Record_Date DATE,
Population INT8,
New_vaccinations BIGINT,
Rolling_Vaccinated numeric
)

INSERT INTO VaccinationRate
SELECT dea.continent, dea.case_location, dea.record_date, dea.population, vac.new_vaccinations,
SUM(vac.new_vaccinations) OVER (PARTITION BY vac.case_location ORDER BY vac.case_location, vac.record_date) AS rolling_vaccinated
FROM coviddeaths dea 
JOIN covidvaccinations vac
ON dea.case_location = vac.case_location
AND dea.record_date = vac.record_date
--WHERE dea.continent IS NOT NULL

SELECT * , (rolling_vaccinated::float/population::float)*100 AS Vac_rate
FROM VaccinationRate

-- Creating View to store data for later visualizations

CREATE VIEW VaccinationRate AS
SELECT dea.continent, dea.case_location, dea.record_date, dea.population, vac.new_vaccinations,
SUM(vac.new_vaccinations) OVER (PARTITION BY vac.case_location ORDER BY vac.case_location, vac.record_date) AS rolling_vaccinated
FROM coviddeaths dea 
JOIN covidvaccinations vac
ON dea.case_location = vac.case_location
AND dea.record_date = vac.record_date
WHERE dea.continent IS NOT NULL

SELECT * FROM VaccinationRate

